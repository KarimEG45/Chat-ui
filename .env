# Use .env.local to change these variables
# DO NOT EDIT THIS FILE WITH SENSITIVE DATA

MONGODB_URL=mongodb://127.0.0.1:27017
MONGODB_DB_NAME=ecole-history
MONGODB_DIRECT_CONNECTION=true

COOKIE_NAME=hf-chat
HF_ACCESS_TOKEN=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
HF_API_ROOT=https://api-inference.huggingface.co/models

# used to activate search with web functionality. disabled if none are defined. choose one of the following:
YDC_API_KEY=#your docs.you.com api key here
SERPER_API_KEY=#your serper.dev api key here
SERPAPI_KEY=#your serpapi key here

# Parameters to enable open id login
OPENID_CONFIG=`{
  "PROVIDER_URL": "",
  "CLIENT_ID": "",
  "CLIENT_SECRET": "",
  "SCOPES": ""
}`

IMAGE_DATABASE_CONFIG=`{
  "PROVIDER_URL": "http://127.0.0.1:8000"
}`

# /!\ legacy openid settings, prefer the config above
OPENID_CLIENT_ID=
OPENID_CLIENT_SECRET=
OPENID_SCOPES="openid profile" # Add "email" for some providers like Google that do not provide preferred_username
OPENID_PROVIDER_URL=https://huggingface.co # for Google, use https://accounts.google.com
OPENID_TOLERANCE=
OPENID_RESOURCE=

# Parameters to enable a global mTLS context for client fetch requests
USE_CLIENT_CERTIFICATE=false
CERT_PATH=#
KEY_PATH=#
CA_PATH=#
CLIENT_KEY_PASSWORD=#
REJECT_UNAUTHORIZED=true
API_MODEL__ENDPOINTS=`[
]`
# 'name', 'userMessageToken', 'assistantMessageToken' are required
MODELS=`[
    {
        "endpoints": [
            {
                "url": "http://cs-xing6-01.cs.illinois.edu:8080"
            }
        ],
        "name": "MINT-Agent",
        "userMessageToken": "<|im_start|>user\n",
        "userMessageEndToken": "<|im_end|>",
        "assistantMessageToken": "<|im_start|>assistant\n",
        "assistantMessageEndToken": "<|im_end|>",
        "preprompt": "<|im_start|>system\nA chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions.<|im_end|>",
        "parameters": {
            "temperature": 0.5,
            "top_p": 0.95,
            "truncate": 3072,
            "max_new_tokens": 1024,
            "stop": [
                "<|im_start|>",
                "<|im_end|>"
            ]
        }
    },
    {
        "name": "codellama/CodeLlama-34b-Instruct-hf",
        "displayName": "codellama/CodeLlama-34b-Instruct-hf",
        "description": "Code Llama, a state of the art code model from Meta.",
        "websiteUrl": "https://about.fb.com/news/2023/08/code-llama-ai-for-coding/",
        "userMessageToken": "",
        "userMessageEndToken": " [/INST] ",
        "assistantMessageToken": "",
        "assistantMessageEndToken": " </s><s>[INST] ",
        "preprompt": " ",
        "chatPromptTemplate": "<s>[INST] <<SYS>>\n{{preprompt}}\n<</SYS>>\n\n{{#each messages}}{{#ifUser}}{{content}} [/INST] {{/ifUser}}{{#ifAssistant}}{{content}} </s><s>[INST] {{/ifAssistant}}{{/each}}",
        "promptExamples": [
            {
                "title": "Fibonacci in Python",
                "prompt": "Write a python function to calculate the nth fibonacci number."
            },
            {
                "title": "JavaScript promises",
                "prompt": "How can I wait for multiple JavaScript promises to fulfill before doing something with their values?"
            },
            {
                "title": "Rust filesystem",
                "prompt": "How can I load a file from disk in Rust?"
            }
        ],
        "parameters": {
            "temperature": 0.1,
            "top_p": 0.95,
            "repetition_penalty": 1.2,
            "top_k": 50,
            "truncate": 1000,
            "max_new_tokens": 2048
        }
    },
    {
        "name": "tiiuae/falcon-180B-chat",
        "displayName": "tiiuae/falcon-180B-chat",
        "description": "Falcon-180B is a 180B parameters causal decoder-only model built by TII and trained on 3,500B tokens.",
        "websiteUrl": "https://www.tii.ae/news/technology-innovation-institute-introduces-worlds-most-powerful-open-llm-falcon-180b",
        "preprompt": " ",
        "chatPromptTemplate": "System: {{preprompt}}\nUser:{{#each messages}}{{#ifUser}}{{content}}\nFalcon:{{/ifUser}}{{#ifAssistant}}{{content}}\nUser:{{/ifAssistant}}{{/each}}",
        "parameters": {
            "temperature": 0.1,
            "top_p": 0.95,
            "repetition_penalty": 1.2,
            "top_k": 50,
            "truncate": 1000,
            "max_new_tokens": 1024,
            "stop": [
                "User:"
            ]
        },
        "promptExamples": [
            {
                "title": "Write an email from bullet list",
                "prompt": "As a restaurant owner, write a professional email to the supplier to get these products every week: \n\n- Wine (x10)\n- Eggs (x24)\n- Bread (x12)"
            },
            {
                "title": "Code a snake game",
                "prompt": "Code a basic snake game in python, give explanations for each step."
            },
            {
                "title": "Assist in a task",
                "prompt": "How do I make a delicious lemon cheesecake?"
            }
        ]
    }
]`
OLD_MODELS=`[]`# any removed models, `{ name: string, displayName?: string, id?: string }`
TASK_MODEL='' # name of the model used for tasks such as summarizing title, creating query, etc.

PUBLIC_ORIGIN=#https://huggingface.co
PUBLIC_SHARE_PREFIX=#https://hf.co/chat
PUBLIC_GOOGLE_ANALYTICS_ID=#G-XXXXXXXX / Leave empty to disable
PUBLIC_ANNOUNCEMENT_BANNERS=`[
    {
    "title": "Llama v2 is live on HuggingChat! ðŸ¦™",
    "linkTitle": "Announcement",
    "linkHref": "https://huggingface.co/blog/llama2"
  }
]`

PARQUET_EXPORT_DATASET=
PARQUET_EXPORT_HF_TOKEN=
PARQUET_EXPORT_SECRET=

RATE_LIMIT= # requests per minute
MESSAGES_BEFORE_LOGIN=# how many messages a user can send in a conversation before having to login. set to 0 to force login right away

PUBLIC_APP_NAME=ECOLE # name used as title throughout the app
PUBLIC_APP_ASSETS=chatui # used to find logos & favicons in static/$PUBLIC_APP_ASSETS
PUBLIC_APP_COLOR=orange # can be any of tailwind colors: https://tailwindcss.com/docs/customizing-colors#default-color-palette
PUBLIC_APP_DESCRIPTION=# description used throughout the app (if not set, a default one will be used)
PUBLIC_APP_DATA_SHARING=#set to 1 to enable options & text regarding data sharing
PUBLIC_APP_DISCLAIMER=#set to 1 to show a disclaimer on login page
LLM_SUMMERIZATION=false
LLM_LEARNING=true
ALLOWED_FUNCTIONS =`[
    {
        "endpoint": "/annotate",
        "method": "POST",
        "description": "Annotate an image based on the given prompt.",
        "bodyParameters": [
            {
                "name": "image_id",
                "type": "string",
                "description": "The ID of the image to be annotated."
            },
            {
                "name": "prompt",
                "type": "string",
                "description": "The prompt to be used for annotation. The prompt should be list of objects, for instance: cat, dog, person, car, etc."
            },
            {
                "name": "box_threshold",
                "type": "float",
                "description": "The threshold for boxes."
            },
            {
                "name": "text_threshold",
                "type": "float",
                "description": "The threshold for text."
            }
        ],
        "response": "JSON object with annotation details.",
        "exampleRequest": {
            "method": "POST",
            "path": "/annotate",
            "body": {
                "image_id": "example_image_id",
                "prompt": "example_prompt",
                "box_threshold": 0.7,
                "text_threshold": 0.4
            }
        }
    },
    {
        "endpoint": "/segment",
        "method": "POST",
        "description": "Segment an image based on the given prompt.",
        "bodyParameters": [
            {
                "name": "image_id",
                "type": "string",
                "description": "The ID of the image to be segmented."
            },
            {
                "name": "prompt",
                "type": "string",
                "description": "The prompt to be used for segmentation. Using the default prompt for me: 'Prompt 1','Prompt 2','Prompt 3', 'Prompt 4'"
            }
        ],
        "response": "JSON object containing the ID of the segmented image.",
        "exampleRequest": {
            "method": "POST",
            "path": "/segment",
            "body": {
                "image_id": "example_image_id",
                "prompt": "Prompt 4"
            }
        }
    },
    {
        "endpoint": "/original_images_list",
        "method": "GET",
        "description": "Retrieve a list of original images.",
        "response": "JSON object containing a list of original images.",
        "exampleRequest": {
            "method": "GET",
            "path": "/original_images_list"
        }
    },
    {
        "endpoint": "/image/{image_id}",
        "method": "GET",
        "description": "Retrieve an image in the dataset",
        "response": "JSON object containing the images.",
        "exampleRequest": {
            "method": "GET",
            "path": "/image/6556a032c9c17fdcf269ad7b"
        }
    }
]`
PUBLIC_APP_NAME=ECOLE
PUBLIC_APP_ASSETS=chatui
PUBLIC_APP_COLOR=orange
PUBLIC_APP_DESCRIPTION="Explore the field of Explainable AI with ECOLE, a conversational AI assistant."
PUBLIC_APP_DATA_SHARING=1
PUBLIC_APP_DISCLAIMER=1